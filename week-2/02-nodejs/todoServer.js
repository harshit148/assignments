/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const path = require('path');
  const app = express();
  
  app.use(bodyParser.json());

app.get('/todos', (req, res) => {
    fs.readFile(path.join(__dirname, './todos.json'), 'utf-8', (err, data) => {
      if (err) {
        res.status(500).send('Failed to get todos');
      }
      const parsedData = JSON.parse(data);
      const todos = parsedData.todos;
      res.status(200).json(todos);
    });
  });

app.get('/todos/:id' ,(req, res) => {
  try {
    const data = fs.readFileSync(path.join(__dirname, './todos.json'), { encoding: 'utf-8'});
    const parsedData = JSON.parse(data);
    const todo = parsedData.todos.filter((item) => item.id == req.params.id);
    if (!todo[0]) {
      return res.status(404).send("Todo not found");
    }
    res.status(200).send(JSON.stringify(todo[0]));
  }
  catch(err) {
    res.status(404).send('Failed to get todos');
  }
});

app.post('/todos', (req, res)=> {
  let newTodo = req.body;
  const data = fs.readFileSync(path.join(__dirname, './todos.json'), { encoding: 'utf-8'});
    if (data === "{}") {
      newTodo.id = 1
      const todoArray = new Array();
      todoArray.push(newTodo);
      const firstTodo = {todos: todoArray, lastId: 1}
      fs.writeFileSync(path.join(__dirname, './todos.json'), JSON.stringify(firstTodo), "utf-8");
    }
    else {
      const parsedData = JSON.parse(data);
      newTodo.id = parsedData.lastId + 1;
      parsedData.todos.push(newTodo);
      parsedData.lastId = newTodo.id;
      fs.writeFileSync(path.join(__dirname, './todos.json'), JSON.stringify(parsedData), "utf-8");
    }
    res.status(201).json({
      id: newTodo.id
    });
});

app.put('/todos/:id', (req,res) => {
  const data = fs.readFileSync(path.join(__dirname, './todos.json'), { encoding: 'utf-8'});
  const newTitle = req.body.title;
  const newCompleted = req.body.completed;
  const parsedData = JSON.parse(data);
  const todo = parsedData.todos.filter(item => item.id == req.params.id);
  if (!todo[0]) {
    return res.status(404).send("Todo not found");
  }
  const updatedTodos = parsedData.todos.map((element)=> {
    if (element.id == req.params.id) {
      if (newTitle && newCompleted) {
        return {...element, "title": newTitle, "completed": newCompleted};
      }
      else if(newTitle) {
        return {...element, "title": newTitle}
      }
      else {
        return {...element, "completed": newCompleted};
      }
    }
    return element;
  });
  const updatedJSON = {todos: updatedTodos, lastId: parsedData.lastId}
  fs.writeFileSync(path.join(__dirname, './todos.json'), JSON.stringify(updatedJSON), "utf-8");
  res.status(200).send("Todo item updated");
});

app.delete('/todos/:id', (req,res) => {
  const data = fs.readFileSync(path.join(__dirname, './todos.json'), { encoding: 'utf-8'});
  const parsedData = JSON.parse(data);
  const todo = parsedData.todos.filter(item => item.id == req.params.id);
  if (!todo[0]) {
    return res.status(404).send("Todo not found");
  }
  const updatedTodos = parsedData.todos.filter(element=> element.id != req.params.id);
  let updatedJSON;
  if (updatedTodos.length === 0) {
    updatedJSON = {};
  }
  else {
    updatedJSON = {todos: updatedTodos, lastId: parsedData.lastId}
  }
  fs.writeFileSync(path.join(__dirname, './todos.json'), JSON.stringify(updatedJSON), "utf-8");
  res.status(200).send("Todo item deleted");
});


  module.exports = app;